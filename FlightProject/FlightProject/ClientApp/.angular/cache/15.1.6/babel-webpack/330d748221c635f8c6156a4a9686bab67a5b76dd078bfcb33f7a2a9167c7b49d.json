{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuardGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (!this.authService.currentUser?.email) {\n      this.router.navigate(['/search-flights', {\n        requestedUrl: state.url\n      }]);\n    }\n    return true;\n  }\n}\nAuthGuardGuard.ɵfac = function AuthGuardGuard_Factory(t) {\n  return new (t || AuthGuardGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthGuardGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuardGuard,\n  factory: AuthGuardGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,cAAc;EAEzBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAY;EAExEC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAI1B,IAAI,CAAC,IAAI,CAACJ,WAAW,CAACK,WAAW,EAAEC,KAAK,EAAE;MACxC,IAAI,CAACL,MAAM,CAACM,QAAQ,CAAC,CAAC,iBAAiB,EAAE;QAAEC,YAAY,EAAEJ,KAAK,CAACK;MAAG,CAAE,CAAC,CAAC;;IAGxE,OAAO,IAAI;EACb;;AAfWX,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAY,SAAdZ,cAAc;EAAAa,YAFb;AAAM","names":["AuthGuardGuard","constructor","authService","router","canActivate","route","state","currentUser","email","navigate","requestedUrl","url","factory","providedIn"],"sourceRoot":"","sources":["D:\\project\\FlightProject\\FlightProject\\ClientApp\\src\\app\\Auth\\auth-guard.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\r\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuardGuard implements CanActivate {\n\n  constructor(private authService: AuthService, private router: Router) { }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n\n\n\n    if (!this.authService.currentUser?.email) {\n      this.router.navigate(['/search-flights', { requestedUrl: state.url }])\n    }\n\n    return true;\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}